generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id         Int               @id @default(autoincrement())
  name       String            @db.VarChar(100)
  phone      String            @db.VarChar(20)
  email      String?           @db.VarChar(100)
  createdAt  DateTime          @default(now()) @map("created_at")
  priority   CustomerPriority?
  salesCalls SalesCall[]

  @@map("customers")
}

model SalesCall {
  id                 Int      @id @default(autoincrement())
  customerId         Int      @map("customer_id")
  audioFilePath      String   @map("audio_file_path") @db.VarChar(255)
  transcript         String?
  urgencyScore       Int?     @map("urgency_score")
  budgetScore        Int?     @map("budget_score")
  interestScore      Int?     @map("interest_score")
  engagementScore    Int?     @map("engagement_score")
  overallScore       Int?     @map("overall_score")
  analysisNotes      String?  @map("analysis_notes")
  createdAt          DateTime @default(now()) @map("created_at")
  sentimentScore     Decimal? @map("sentiment_score") @db.Decimal(3, 2)
  conversationPhases Json?    @map("conversation_phases")
  speakerAnalysis    Json?    @map("speaker_analysis")
  objectionAnalysis  Json?    @map("objection_analysis")
  contextInsights    Json?    @map("context_insights")
  analysisConfidence Decimal? @map("analysis_confidence") @db.Decimal(3, 2)
  enhancedNotes      String?  @map("enhanced_notes")
  analysisVersion    String?  @map("analysis_version") @db.VarChar(20)
  gpt4AnalysisUsed   Boolean  @default(false) @map("gpt4_analysis_used")
  customer           Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  fileProcessingRecords FileProcessingRecord[]

  @@map("sales_calls")
}

model ScoringConfiguration {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  weights   Json
  phrases   Json
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("scoring_configurations")
}

model CustomerPriority {
  customerId      Int      @id @map("customer_id")
  totalCalls      Int      @map("total_calls")
  avgOverallScore Decimal  @map("avg_overall_score") @db.Decimal(5, 2)
  lastCallDate    DateTime @map("last_call_date")
  priorityRank    Int      @map("priority_rank")
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_priorities")
}

// Multi-File Processing Tables

model ExternalFolder {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(100)
  storageConfig    Json     @map("storage_config")
  monitorConfig    Json     @map("monitor_config")
  processingConfig Json     @map("processing_config")
  isActive         Boolean  @default(true) @map("is_active")
  lastScan         DateTime? @map("last_scan")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  batchJobs        BatchJob[]

  @@map("external_folders")
}

model BatchJob {
  id             Int      @id @default(autoincrement())
  folderId       Int      @map("folder_id")
  name           String   @db.VarChar(100)
  status         String   @db.VarChar(20) // pending, running, completed, failed, cancelled
  totalFiles     Int      @default(0) @map("total_files")
  processedFiles Int      @default(0) @map("processed_files")
  failedFiles    Int      @default(0) @map("failed_files")
  skippedFiles   Int      @default(0) @map("skipped_files")
  startedAt      DateTime? @map("started_at")
  completedAt    DateTime? @map("completed_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  folder         ExternalFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  fileRecords    FileProcessingRecord[]

  @@map("batch_jobs")
}

model FileProcessingRecord {
  id                    Int      @id @default(autoincrement())
  batchJobId            Int      @map("batch_job_id")
  fileName              String   @db.VarChar(255) @map("file_name")
  filePath              String   @db.VarChar(500) @map("file_path")
  fileSize              BigInt?  @map("file_size")
  status                String   @db.VarChar(20) // discovered, queued, processing, completed, failed, retrying, skipped
  errorCode             String?  @db.VarChar(50) @map("error_code")
  errorMessage          String?  @map("error_message")
  errorDetails          Json?    @map("error_details")
  retryCount            Int      @default(0) @map("retry_count")
  maxRetries            Int      @default(3) @map("max_retries")
  processingStartedAt   DateTime? @map("processing_started_at")
  processingCompletedAt DateTime? @map("processing_completed_at")
  salesCallId           Int?     @map("sales_call_id")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  batchJob              BatchJob @relation(fields: [batchJobId], references: [id], onDelete: Cascade)
  salesCall             SalesCall? @relation(fields: [salesCallId], references: [id], onDelete: SetNull)

  @@map("file_processing_records")
}

model NotificationConfig {
  id        Int      @id @default(autoincrement())
  type      String   @db.VarChar(50)
  name      String   @db.VarChar(100)
  config    Json
  conditions Json
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notification_configs")
}
