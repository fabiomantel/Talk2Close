name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]
  pull_request_target:
    branches: [ main, develop ]

jobs:
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install backend dependencies
      run: npm ci
      
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Create uploads directory
      run: mkdir -p uploads
      
    - name: Run backend tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: file:./test.db
        
    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --watchAll=false --passWithNoTests
      env:
        CI: true
        REACT_APP_API_BASE_URL: http://localhost:3000/api
        REACT_APP_BACKEND_URL: http://localhost:3000
        
    - name: TypeScript check
      working-directory: frontend
      run: npx tsc --noEmit
      
    - name: Build frontend
      working-directory: frontend
      run: npm run build
      env:
        REACT_APP_API_BASE_URL: https://api.example.com/api
        REACT_APP_BACKEND_URL: https://api.example.com

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install backend dependencies
      run: npm ci
      
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run npm audit (backend)
      run: npm audit --audit-level=high
      
    - name: Run npm audit (frontend)
      working-directory: frontend
      run: npm audit --audit-level=high

  pr-status:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [quick-checks, security-audit]
    if: always()
    
    steps:
    - name: Check PR status
      run: |
        if [[ "${{ needs.quick-checks.result }}" == "success" && "${{ needs.security-audit.result }}" == "success" ]]; then
          echo "‚úÖ All PR checks passed!"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Some PR checks failed!"
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
      id: check-status
      
    - name: Update PR status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.check-status.outputs.status }}';
          const statusEmoji = status === 'success' ? '‚úÖ' : '‚ùå';
          const statusText = status === 'success' ? 'All checks passed!' : 'Some checks failed!';
          
          const commentBody = `## üîç PR Validation Results
          
          ${statusEmoji} **${statusText}**
          
          ### üìã Check Summary
          - **Quick Checks**: ${{ needs.quick-checks.result }}
          - **Security Audit**: ${{ needs.security-audit.result }}
          
          ### üöÄ What was tested
          - ‚úÖ Backend unit tests
          - ‚úÖ Frontend component tests  
          - ‚úÖ TypeScript compilation
          - ‚úÖ Production build
          - ‚úÖ Security vulnerabilities
          
          [View full logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
          
          // Find existing bot comment
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## üîç PR Validation Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          }
