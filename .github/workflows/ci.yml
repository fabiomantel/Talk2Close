name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Configure npm authentication
      run: |
        npm config set //registry.npmjs.org/:_authToken ""
        npm config set registry https://registry.npmjs.org/
        npm cache clean --force
        
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit || npm install --no-audit
      
    - name: Create uploads directory
      run: mkdir -p uploads
      
    - name: Run backend tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: file:./test.db
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/
        retention-days: 7

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Configure npm authentication
      run: |
        npm config set //registry.npmjs.org/:_authToken ""
        npm config set registry https://registry.npmjs.org/
        npm cache clean --force
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci --prefer-offline --no-audit || npm install --no-audit
      
    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --watchAll=false --coverage --passWithNoTests
      env:
        CI: true
        REACT_APP_API_BASE_URL: http://localhost:3000/api
        REACT_APP_BACKEND_URL: http://localhost:3000
        
    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results-${{ matrix.node-version }}
        path: frontend/coverage/
        retention-days: 7

  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Configure npm authentication
      run: |
        npm config set //registry.npmjs.org/:_authToken ""
        npm config set registry https://registry.npmjs.org/
        npm cache clean --force
        
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit || npm install --no-audit
      
    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci --prefer-offline --no-audit || npm install --no-audit
      
    - name: Run TypeScript check
      working-directory: frontend
      run: npx tsc --noEmit
      
    - name: Run ESLint (if available)
      working-directory: frontend
      run: |
        if npm run | grep -q lint; then
          npm run lint
        else
          echo "No lint script found, skipping linting"
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, lint-and-type-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Configure npm authentication
      run: |
        npm config set //registry.npmjs.org/:_authToken ""
        npm config set registry https://registry.npmjs.org/
        npm cache clean --force
        
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit || npm install --no-audit
      
    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci --prefer-offline --no-audit || npm install --no-audit
      
    - name: Build frontend
      working-directory: frontend
      run: npm run build
      env:
        REACT_APP_API_BASE_URL: https://api.example.com/api
        REACT_APP_BACKEND_URL: https://api.example.com
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Configure npm authentication
      run: |
        npm config set //registry.npmjs.org/:_authToken ""
        npm config set registry https://registry.npmjs.org/
        npm cache clean --force
        
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit || npm install --no-audit
      
    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci --prefer-offline --no-audit || npm install --no-audit
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run frontend npm audit
      working-directory: frontend
      run: npm audit --audit-level=moderate

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      sqlite:
        image: alpine:latest
        options: >-
          --health-cmd "which sqlite3"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Configure npm authentication
      run: |
        npm config set //registry.npmjs.org/:_authToken ""
        npm config set registry https://registry.npmjs.org/
        npm cache clean --force
        
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit || npm install --no-audit
      
    - name: Create uploads directory
      run: mkdir -p uploads
      
    - name: Run integration tests
      run: npm test -- --testPathPattern="integration.test.js"
      env:
        NODE_ENV: test
        DATABASE_URL: file:./test-integration.db
